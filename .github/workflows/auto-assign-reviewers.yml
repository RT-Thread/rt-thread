#
# Copyright (c) 2006-2025, RT-Thread Development Team
#
# SPDX-License-Identifier: Apache-2.0
#
# Change Logs:
# Date           Author       Notes
# 2025-01-21     kurisaW      Initial version
# 2025-03-14     hydevcode
# 2025-05-10     kurisaW      Fixed file existence, cache, and comment time issues

# Script Function Description: Assign PR reviews based on the MAINTAINERS list.

name: Auto Review Assistant

on:
  pull_request_target:
    branches: [ master ]
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-22.04
    if: github.repository_owner == 'RT-Thread'
    permissions:
      issues: read
      pull-requests: write
      contents: read
    steps:
      - name: Extract PR number
        id: extract-pr
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master
          sparse-checkout: MAINTAINERS
          persist-credentials: false
      - name: Get changed files
        id: changed_files
        run: |
          # Initialize changed_files.txt
          touch $GITHUB_WORKSPACE/changed_files.txt
          
          # Get changed files via GitHub API
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.extract-pr.outputs.PR_NUMBER }}/files" | \
            jq -r '.[].filename')
          echo "$changed_files" | grep -v '^MAINTAINERS$' > $GITHUB_WORKSPACE/changed_files.txt
          
          # Get existing bot comment
          existing_comment=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.extract-pr.outputs.PR_NUMBER }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | .body | @base64')
          
          echo "=== Changed Files ==="
          cat $GITHUB_WORKSPACE/changed_files.txt
          echo "====================="
          
          comment_time=""
          if [[ -n "$existing_comment" ]]; then
            comment_body=$(echo "$existing_comment" | base64 -d | sed -nE 's/.*Last Updated: ([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2} UTC).*/\1/p')
            if [[ -n "$comment_body" ]]; then
              comment_time=$(date -d "$comment_body" +%s 2>/dev/null || echo "")
            fi
          fi
          echo "COMMENT_TIME=${comment_time}" >> $GITHUB_OUTPUT
          
      - name: Parse MAINTAINERS file
        id: parse_maintainer
        run: |
          # Initialize tag_data.csv
          touch $GITHUB_WORKSPACE/tag_data.csv
          
          # Parse MAINTAINERS file
          awk '
            /^tag:/ { 
              tag = substr($0, index($0, $2))
            }
            /^path:/ {
              path = substr($0, index($0, $2))
              gsub(/^[ \t]+|[ \t]+$/, "", path)
            }
            /^owners:/ {
              owners = substr($0, index($0, $2))
              split(owners, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' $GITHUB_WORKSPACE/MAINTAINERS > $GITHUB_WORKSPACE/tag_data.csv
          
      - name: Generate reviewers list
        id: generate_reviewers
        run: |
          # Initialize output files
          touch $GITHUB_WORKSPACE/triggered_reviewers.txt $GITHUB_WORKSPACE/triggered_tags.txt $GITHUB_WORKSPACE/unique_reviewers.txt $GITHUB_WORKSPACE/unique_tags.txt
          
          while IFS='|' read -r tag path reviewers; do
            escaped_path=$(sed 's/[.[\*^$]/\\&/g' <<< "$path")
            if grep -qE "^$escaped_path(/.*)*" $GITHUB_WORKSPACE/changed_files.txt; then
              echo "$reviewers" | tr -s ' ' '\n' | sed '/^$/d' >> $GITHUB_WORKSPACE/triggered_reviewers.txt
              echo "$tag" >> $GITHUB_WORKSPACE/triggered_tags.txt
              echo "Matched: $path → $tag"
            fi
          done < $GITHUB_WORKSPACE/tag_data.csv
          
          # Generate unique lists
          sort -u $GITHUB_WORKSPACE/triggered_reviewers.txt > $GITHUB_WORKSPACE/unique_reviewers.txt
          sort -u $GITHUB_WORKSPACE/triggered_tags.txt > $GITHUB_WORKSPACE/unique_tags.txt
          
          echo "=== Matched Paths ==="
          cat $GITHUB_WORKSPACE/triggered_tags.txt
          echo "=== Matched Reviewers ==="
          cat $GITHUB_WORKSPACE/triggered_reviewers.txt
          
      - name: Restore Reviewers Cache
        id: reviewers-cache-restore
        if: ${{ steps.changed_files.outputs.COMMENT_TIME != '' }}
        uses: actions/cache/restore@v4
        with:
          path: |
            $GITHUB_WORKSPACE/unique_tags_bak.txt
            $GITHUB_WORKSPACE/unique_reviewers_bak.txt
          key: ${{ runner.os }}-auto-assign-reviewers-${{ steps.extract-pr.outputs.PR_NUMBER }}-${{ steps.changed_files.outputs.COMMENT_TIME }}
          
      - name: Get approval status
        id: get_approval
        run: |
          current_time=$(date -u +"%Y-%m-%d %H:%M UTC")
          touch $GITHUB_WORKSPACE/unique_reviewers.txt $GITHUB_WORKSPACE/approval_data.txt $GITHUB_WORKSPACE/review_status.md
          
          reviewers=$(cat $GITHUB_WORKSPACE/unique_reviewers.txt | tr '\n' '|' | sed 's/|$//')
          
          comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.extract-pr.outputs.PR_NUMBER }}/comments")
          
          echo '#!/bin/bash' > $GITHUB_WORKSPACE/approval_data.sh
          echo 'declare -A approvals=()' >> $GITHUB_WORKSPACE/approval_data.sh
          
          jq -r --arg reviewers "$reviewers" '
            .[] | 
            select(.user.login != "github-actions[bot]") |
            select(.body | test("^\\s*LGTM\\s*$"; "i")) |
            .user.login as $user |
            "@\($user)" as $mention |
            select($mention | inside($reviewers)) |
            "approvals[\"\($mention)\"]=\"\(.created_at)\""
          ' <<< "$comments" >> $GITHUB_WORKSPACE/approval_data.sh
          
          jq -r --arg reviewers "$reviewers" '
            .[] | 
            select(.user.login != "github-actions[bot]") |
            select(.body | test("^\\s*LGTM\\s*$"; "i")) |
            .user.login as $user |
            "@\($user)" as $mention |
            select($mention | inside($reviewers)) |
            "\($mention) \(.created_at)"
          ' <<< "$comments" >> $GITHUB_WORKSPACE/approval_data.txt
          
          chmod +x $GITHUB_WORKSPACE/approval_data.sh
          source $GITHUB_WORKSPACE/approval_data.sh
          
          notified_users=""
          if [[ -f $GITHUB_WORKSPACE/unique_reviewers_bak.txt ]]; then
            notified_users=$(cat $GITHUB_WORKSPACE/unique_reviewers_bak.txt | xargs)
          fi
          
          {
            echo "---"
            echo "### 📊 Current Review Status (Last Updated: $current_time)"
            while read -r reviewer; do
              formatted_reviewer="${reviewer#@}"
              if [[ -n "${approvals[$reviewer]}" ]]; then
                timestamp=$(date -d "${approvals[$reviewer]}" -u +"%Y-%m-%d %H:%M UTC")
                echo "- ✅ **$formatted_reviewer** Reviewed On $timestamp"
              else
                if [[ " $notified_users " =~ " $reviewer " ]]; then
                  echo "- ⌛ **$formatted_reviewer** Pending Review"
                else
                  echo "- ⌛ **@$formatted_reviewer** Pending Review"
                fi
              fi
            done < $GITHUB_WORKSPACE/unique_reviewers.txt
          } > $GITHUB_WORKSPACE/review_status.md
          
          echo "CURRENT_TIME=${current_time}" >> $GITHUB_OUTPUT
          
      - name: Generate review data
        id: generate_review
        run: |
          touch $GITHUB_WORKSPACE/review_data.md
          
          unique_tags=$(cat $GITHUB_WORKSPACE/unique_tags.txt | xargs)
          unique_tags_bak=""
          if [[ -f $GITHUB_WORKSPACE/unique_tags_bak.txt ]]; then
            unique_tags_bak=$(cat $GITHUB_WORKSPACE/unique_tags_bak.txt | xargs)
          fi
          
          existing_tags=""
          for tag in $unique_tags; do
            if [[ ! " $unique_tags_bak " =~ " $tag " ]]; then
              existing_tags+="$tag "
            fi
          done
          
          current_time=$(date -u +"%Y-%m-%d %H:%M UTC")
          {
            echo "## 📌 Code Review Assignment"
            echo ""
            while IFS='|' read -r tag path reviewers; do
              escaped_path=$(sed 's/[.[\*^$]/\\&/g' <<< "$path")
              if grep -qE "^$escaped_path(/|$)" $GITHUB_WORKSPACE/changed_files.txt; then
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`"
                if [[ " $existing_tags " =~ " $tag " ]]; then
                  echo "**Reviewers:** $reviewers"
                else
                  formatted_reviewers=$(echo "$reviewers" | sed 's/@//g')
                  echo "**Reviewers:** $formatted_reviewers"
                fi
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                grep -E "^$escaped_path(/|$)" $GITHUB_WORKSPACE/changed_files.txt | sed 's/^/- /'
                echo ""
                echo "</details>"
                echo ""
              fi
            done < $GITHUB_WORKSPACE/tag_data.csv
            cat $GITHUB_WORKSPACE/review_status.md
            echo "---"
            echo "### 📝 Review Instructions"
            echo ""
            echo "1. **维护者可以通过单击此处来刷新审查状态:** [🔄 刷新状态](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo "   **Maintainers can refresh the review status by clicking here:** [🔄 Refresh Status](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo ""
            echo "2. **确认审核通过后评论 \`LGTM/lgtm\`**"
            echo "   **Comment \`LGTM/lgtm\` after confirming approval**"
            echo ""
            echo "3. **PR合并前需至少一位维护者确认**"
            echo "   **PR must be confirmed by at least one maintainer before merging**"
            echo ""
            echo "> ℹ️ **刷新CI状态操作需要具备仓库写入权限。**"
            echo "> ℹ️ **Refresh CI status operation requires repository Write permission.**"
          } > $GITHUB_WORKSPACE/review_data.md
          
      - name: Post/Update comment
        id: post_comment
        run: |
          existing_comment=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.extract-pr.outputs.PR_NUMBER }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body} | @base64')
          
          if [[ -n "$existing_comment" ]]; then
            comment_id=$(echo "$existing_comment" | base64 -d | jq -r .id)
            echo "Updating existing comment $comment_id"
            curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat $GITHUB_WORKSPACE/review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id"
          else
            echo "Creating new comment"
            curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat $GITHUB_WORKSPACE/review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.extract-pr.outputs.PR_NUMBER }}/comments"
          fi
          
      - name: Get Comment Time
        id: get_comment_time
        run: |
          current_time=$(date -u +"%s")
          echo "CURRENT_TIME=${current_time}" >> $GITHUB_OUTPUT
          cp $GITHUB_WORKSPACE/unique_reviewers.txt $GITHUB_WORKSPACE/unique_reviewers_bak.txt
          cp $GITHUB_WORKSPACE/unique_tags.txt $GITHUB_WORKSPACE/unique_tags_bak.txt
          
      - name: Save Reviewers Cache
        id: reviewers-cache-save
        uses: actions/cache/save@v4
        with:
          path: |
            $GITHUB_WORKSPACE/unique_tags_bak.txt
            $GITHUB_WORKSPACE/unique_reviewers_bak.txt
          key: ${{ runner.os }}-auto-assign-reviewers-${{ steps.extract-pr.outputs.PR_NUMBER }}-${{ steps.get_comment_time.outputs.CURRENT_TIME }}