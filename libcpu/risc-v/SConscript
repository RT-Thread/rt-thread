# RT-Thread building script for bridge

import os
from building import *

Import('rtconfig')

cwd   = GetCurrentDir()
group = []
list  = os.listdir(cwd)
bsp_path = Dir('#').abspath
vender_path = cwd

if not os.path.exists(bsp_path + "/link.lds"):
    Env['LINKFLAGS'] = Env['LINKFLAGS'].replace('link.lds', cwd + "/link.lds")
    Preprocessing("link.lds.S", ".lds", CPPPATH=[bsp_path, cwd + '/common/include'])

# fix the linker with crtx.o
Env['LINKFLAGS'] += ' -nostartfiles'

# add common code files
group += SConscript(os.path.join('common', 'SConscript'))

# cpu porting code files
if 'VENDER' in vars(rtconfig) and rtconfig.VENDER != '':
    group = group + SConscript(os.path.join(rtconfig.VENDER, rtconfig.CPU, 'SConscript'))
    vender_path += rtconfig.VENDER + "/" + rtconfig.CPU
elif rtconfig.CPU != '':
    group = group + SConscript(os.path.join(rtconfig.CPU, 'SConscript'))
    vender_path += rtconfig.CPU

if os.path.exists(vender_path + "/mmu_vendor.h"):
    Env['ASFLAGS']  += '-D__HAS_MMU_VENDOR__'
    Env['CFLAGS']   += '-D__HAS_MMU_VENDOR__'
    Env['CXXFLAGS'] += '-D__HAS_MMU_VENDOR__'

if os.path.exists(vender_path + "/opcode_vendor.h"):
    Env['ASFLAGS']  += '-D__HAS_OPCODE_VENDOR__'
    Env['CFLAGS']   += '-D__HAS_OPCODE_VENDOR__'
    Env['CXXFLAGS'] += '-D__HAS_OPCODE_VENDOR__'

Return('group')
