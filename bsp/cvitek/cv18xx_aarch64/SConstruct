import os
import sys
import rtconfig
import re

if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.normpath(os.getcwd() + '/../../..')

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

TARGET = 'rtthread.' + rtconfig.TARGET_EXT
TRACE_CONFIG = ""

content = ""
with open("rtconfig.h") as f:
    for line in f.readlines():
        if line.find("RT_BACKTRACE_FUNCTION_NAME") != -1:
            for token in line.split(" "):
                if re.match(r'RT_BACKTRACE_FUNCTION_NAME$', token, flags=0):
                    TRACE_CONFIG = " "

DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw'],
    AS   = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS + TRACE_CONFIG,
    CC   = rtconfig.CC, CFLAGS = rtconfig.CFLAGS + TRACE_CONFIG,
    CXX  = rtconfig.CXX, CXXFLAGS = rtconfig.CXXFLAGS  + TRACE_CONFIG,
    AR   = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
env['ASCOM'] = env['ASPPCOM']
env['LINKCOM'] = '$LINK -o $TARGET $LINKFLAGS $__RPATH $SOURCES $_LIBDIRFLAGS -Wl,--start-group $_LIBFLAGS -Wl,--end-group'

Export('RTT_ROOT')
Export('rtconfig')

SDK_ROOT = os.path.abspath('./')

drivers_path_prefix = os.path.dirname(SDK_ROOT) + '/drivers'

# prepare building environment
objs = PrepareBuilding(env, RTT_ROOT)

# include libraries
objs.extend(SConscript(drivers_path_prefix + '/SConscript', variant_dir='build/drivers', duplicate=0))

# make a building
DoBuilding(TARGET, objs)
